/*****************************************************************************
 * \file  mainwindow.h
 * \brief Header file includes class generated by QT and implements GUI
 * interactions.
 *
 * Last Updated : 2022.03.16 Chunwoo Kim (CKim) & Veysi ADIN (VysAdn)
 * Contact Info : cwkim@kist.re.kr & veysi.adin@kist.re.kr
 * @note Google C++ naming style applied, however for GUI sloths, Qt style naming
 * is used, and for custom sloths on_FooBar() style is used.
 *******************************************************************************/

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QElapsedTimer>
#include <qstring.h>

#include "epos4_can.h"
#include "motorthread.h"
#include "m_defines.h"
#include "emergency_window.h"
#include "eposthread.h"
#include "initialization_window.h"


#include <wiringPi.h>
#include <softPwm.h>

namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    /**
     * @brief on_btnDecreaseRPM_clicked GUI callback to decrease debrider motor
     * RPM value by 1000.
     */
    void on_btnDecreaseRPM_clicked();

    /**
     * @brief on_btnIncreaseRPM_clicked GUI callback to increase debrider motor
     * RPM value by 1000.
     */
    void on_btnIncreaseRPM_clicked();

    /**
     * @brief on_radioCW_toggled GUI callback to change rotation direction of
     * debrider motor to clock-wise.
     * @param checked bool value if checked.
     */
    void on_radioCW_toggled(bool checked);

    /**
     * @brief on_radioCCW_toggled GUI callback to change rotation direction of
     * debrider motor to counter clock-wise.
     * @param checked bool value if checked.
     */
    void on_radioCCW_toggled(bool checked);

    /**
     * @brief on_radioOSC_toggled GUI callback to change running mode of
     * debrider motor to oscillation mode.
     * @param checked bool value if checked.
     */
    void on_radioOSC_toggled(bool checked);

    /**
     * @brief on_btnDecreaseFlow_clicked GUI callback to decrease suction motor
     * RPM value by ten percent.
     */
    void on_btnDecreaseFlow_clicked();

    /**
     * @brief on_btnIncreaseFlow_clicked GUI callback to increase suction motor
     * velocity value by ten percent.
     */
    void on_btnIncreaseFlow_clicked();

    /**
     * @brief on_btnIrrigationMove_clicked GUI callback to move suction motor.
     */
    void on_btnIrrigationMove_clicked();

    /**
     * @brief on_btnIrrigationStop_clicked GUI callback to stop suction motor.
     */
    void on_btnIrrigationStop_clicked();
    
    /**
     * @brief on_btnCloseBlade_clicked GUI callback to close blade of motor.
     */
    void on_btnCloseBlade_clicked();

    /**
     * @brief on_radioMAXRPM_clicked GUI callback to select maximum RPM value
     * for debrider motor. Currently max RPM value is 12000.
     */
    void on_radioMAXRPM_clicked();

    /**
     * @brief on_StateChanged Sloth for handling UpdateGUI() signal from other threads.
     * Updates GUI based on state.
     * @param state Current debrider state.
     */
    void on_StateChanged(int state);

    /**
     * @brief on_CallEmergencyWindow Opens emergency windows in case of emergency.
     */
    void on_CallEmergencyWindow();

    /**
     * @brief on_ExitEmergencyClicked Sloth to handle emergency exit button clicked.
     * @param a emergency state.
     */
    void on_ExitEmergencyClicked(int a);

    /**
     * @brief on_CallInitWindow Calls initialization window, and closes all other windows.
     */
    void on_CallInitWindow();

    /**
     * @brief on_ReinitClicked Handles signal coming from initialization window when user clicks reinitialize.
     * @param state Current state of debrider.
     */
    void on_ReinitClicked(int state);

signals:
    /**
     * @brief InitStateChanged Emitted when initialization state change to notify initialization window.
     * @param state Current state of debrider.
     */
    void InitStateChanged(int state);

private:
      /**
       * @brief PrintStatus Prints the status of debrider, such as debrider velocity and suction motor velocity percentage.
       * @param dSpeed Debrider speed.
       * @param pSpeed Pump motor speed.
       */
      void PrintStatus(int dSpeed, int pSpeed);

      /**
       * @brief StopPumpMotor Stops pumps motor.
       */
      void StopPumpMotor();

      /**
       * @brief MovePumpMotor Moves pump motor.
       */
      void MovePumpMotor();

      /**
       * @brief EnableGUI Enables GUI button, meaning that system is ready to accept inputs from user.
       */
      void EnableGUI();

      /**
       * @brief DisableGUI Disables GUI button, meaning that system will not accept inputs from user.
       * GUI is disable only in case of emergency or when debrider motor is running.
       */
      void DisableGUI();

      /**
       * @brief ShowPedalButtonStates This function shows changes in GUI when user clicks pedal buttons.
       * Each pedal button has a function, based on pedal button inputs, this function will
       * @note Left button  changes preset RPM values.
       * @note Right button changes operation mode CW,CCW,OSC
       * @note Left pedal   runs closes blade.
       */
      void ShowPedalButtonStates();

      // VysAdn Valve On/Off
      /**
       * @brief EnableValve Enables solenoid valve output.
       */
      void EnableValve();

      /**
       * @brief DisableValve Disables solenoid valve output.
       */
      void DisableValve();

      /**
       * @brief InitializeIO  Initializes wiringpi library and pin mapping for RPI.
       */
      void InitializeIO();

private:
      Ui::MainWindow *ui;

      /// QString to display speed value.
      QString speed_label_;

      /// QString to display status of debrider.
      QString status_label_;

      /// Pump motor target velocity value, set by user in GUI.
      int pump_motor_target_speed_=0;
      /// Used to display speed pump motor velocity.
      int pump_motor_printed_speed_val_=0;
      /// Flag to describing pump motor running status.
      bool pump_running_status_=false;
      /// Debrider motor target speed set by user in GUI.
      int debrider_motor_target_speed_;
      /// EmergencyWindow instance to call in case of emergency.
      EmergencyWindow emergency_window_;
      /// Main motor thread.
      MotorThread motor_thread_;
      /// Initialization window, this window will be shown to user first.
      InitializationWindow init_window_;
};

#endif // MAINWINDOW_H
